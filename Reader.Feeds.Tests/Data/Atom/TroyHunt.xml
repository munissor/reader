<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?>
<?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?>
<feed
    xmlns="http://www.w3.org/2005/Atom"
    xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/"
    xmlns:blogger="http://schemas.google.com/blogger/2008"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:gd="http://schemas.google.com/g/2005"
    xmlns:thr="http://purl.org/syndication/thread/1.0"
    xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
    xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">
  <id>tag:blogger.com,1999:blog-3977663544337573923</id>
  <updated>2014-11-13T21:33:23.320+11:00</updated>
  <category term="Security" />
  <category term=".NET" />
  <category term="Speaking" />
  <category term="ASafaWeb" />
  <category term="Have I been pwned?" />
  <category term="Azure" />
  <category term="Passwords" />
  <category term="SSL" />
  <category term="Scam" />
  <category term="OWASP" />
  <category term="Pluralsight" />
  <category term="Subversion" />
  <category term="Continuous Integration" />
  <category term="Red Gate" />
  <category term="TeamCity" />
  <category term="Visual Studio" />
  <category term="UX" />
  <category term="Facebook" />
  <category term="MVP" />
  <category term="SQL Source Control" />
  <category term="Database" />
  <category term="SQL Injection" />
  <category term="Web Deploy" />
  <category term="WiFi Pineapple" />
  <category term="AppHarbor" />
  <category term="Cloud" />
  <category term="Internet Explorer" />
  <category term="Performance" />
  <category term="Product Review" />
  <category term="SQL Server" />
  <category term="Software Quality" />
  <category term="Source Control Management" />
  <category term="Tesco" />
  <category term="Windows" />
  <category term="5 Minute Wonder" />
  <category term="Blogger" />
  <category term="China" />
  <category term="LinkedIn" />
  <category term="Twitter" />
  <category term="iPhone" />
  <category term="Apple" />
  <category term="Career Development" />
  <category term="Conference" />
  <category term="Gootkit" />
  <category term="Media" />
  <category term="Mobile" />
  <category term="NDepend" />
  <category term="Netsparker" />
  <category term="Online Identity" />
  <category term="SQL Data Compare" />
  <category term="SQL Data Generator" />
  <category term="Silverlight" />
  <category term="XSS" />
  <category term="1Password" />
  <category term="Backup" />
  <category term="Bing" />
  <category term="Code Quality" />
  <category term="Corporate" />
  <category term="Design Utopia" />
  <category term="DotNetNuke" />
  <category term="Enterprise Software Platform" />
  <category term="Entity Framework" />
  <category term="FxCop" />
  <category term="IIS" />
  <category term="K2" />
  <category term="MSBuild" />
  <category term="MVC" />
  <category term="Mozy" />
  <category term="People Management" />
  <category term="Personal Development" />
  <category term="ReSharper" />
  <category term="SQL Compare" />
  <category term="SQL Prompt" />
  <category term="SQL Search" />
  <category term="SQL Test" />
  <category term="SharePoint" />
  <category term="Standards" />
  <category term="StatSVN" />
  <category term="StillAlive" />
  <category term="Travel" />
  <category term="WCSA" />
  <category term="Windows Mobile" />
  <category term="elmah" />
  <title type="text">Troy Hunt's Blog</title>
  <subtitle type="html">Observations, musings and conjecture about the world of software and technology</subtitle>
  <link rel="alternate" type="text/html" href="http://www.troyhunt.com/" />
  <link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default?start-index=11&amp;max-results=10&amp;redirect=false" />
  <author>
    <name>Troy Hunt</name>
    <uri>https://plus.google.com/111846329802076778489</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
  </author>
  <generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
  <openSearch:totalResults>312</openSearch:totalResults>
  <openSearch:startIndex>1</openSearch:startIndex>
  <openSearch:itemsPerPage>10</openSearch:itemsPerPage>
  <atom10:link
      xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/TroyHunt" />
  <feedburner:info uri="troyhunt" />
  <atom10:link
      xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" />
  <geo:lat>-33.824008</geo:lat>
  <geo:long>151.251244</geo:long>
  <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by/3.0/" />
  <feedburner:emailServiceId>TroyHunt</feedburner:emailServiceId>
  <feedburner:feedburnerHostname>https://feedburner.google.com</feedburner:feedburnerHostname>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-5873208799404339789</id>
    <published>2014-11-13T21:32:00.001+11:00</published>
    <updated>2014-11-13T21:33:23.325+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Azure" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Visual Studio" />
    <title type="text">Success by a thousand cuts: Visual Studio 2013 Update 4 and SQL Azure</title>
    <content type="html">&lt;p&gt;It seems like every time I turn around there’s something I haven’t seen in Azure. If I’m honest, it leaves me in a perpetual state of “Oh man, there is so much stuff I don’t know”. I suspect that resonates with many readers of this blog because there’s just so much stuff to keep on top of these days.&lt;/p&gt; &lt;p&gt;Often I’m not sure if I’ve just been overlooking something that’s always been there or if it’s brand new. Case in point: today I’m in the Azure Management Portal and I see this when I’m in the context of a SQL Azure database:&lt;/p&gt; &lt;p&gt;&lt;img width="960" height="172" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Link to &amp;quot;Open in Visual Studio&amp;quot; when in the context of a SQL Azure DB" src="http://lh4.ggpht.com/-dSMs1ricK9A/VGSIoskNVII/AAAAAAAAHiQ/vAp8SOyCZ0g/image%25255B2%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt; &lt;p&gt;“Open in Visual Studio” – where did that come from?! Given no obvious Google results, I’m assuming that this just hit with Visual Studio 2013 Update 4 per the message below:&lt;/p&gt; &lt;p&gt;&lt;img width="959" height="173" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="In order to use this feature, ensure that you have Visual Studio 2013 with Update 4 or above with SQL Server tooling" src="http://lh5.ggpht.com/-h0SMKaa6Vu4/VGSIpHY8hzI/AAAAAAAAHiU/8Hie37Bqkfg/image%25255B5%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;So what’s the point of it? Well it means you get this:&lt;/p&gt; &lt;p&gt;&lt;img width="501" height="335" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Connect to SQL Azure" src="http://lh6.ggpht.com/-5jhZe9aJne8/VGSIpl4n4xI/AAAAAAAAHig/KTTRkffQNl8/image%25255B21%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Which then you gives you what we’ve had with the &lt;a href="http://msdn.microsoft.com/en-au/data/tools.aspx"&gt;SQL Server Data Tools&lt;/a&gt; for some time, that is you get your SQL Azure in the SQL Server Object Explorer:&lt;/p&gt; &lt;p&gt;&lt;img width="251" height="307" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="SQL Azure in the SQL Server Object Explorer" src="http://lh4.ggpht.com/-5UkQDsh5zHc/VGSIqY7O_KI/AAAAAAAAHio/gGloUdMJQow/image%25255B11%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;This is kind of the point of the title: there are all these little shortcuts appearing that don’t necessarily make the headlines but take something that would normally be several steps and turn it into a one-click affair. You add all these together and you start getting back little slices of your day that you’d otherwise spend jumping in out of context between different things. You can then use those little slices to discover how much other stuff you don’t know :)&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/OUZRm4NuUOc" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/5873208799404339789" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/5873208799404339789" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/OUZRm4NuUOc/success-by-thousand-cuts-visual-studio.html" title="Success by a thousand cuts: Visual Studio 2013 Update 4 and SQL Azure" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <media:thumbnail
        xmlns:media="http://search.yahoo.com/mrss/" url="http://lh4.ggpht.com/-dSMs1ricK9A/VGSIoskNVII/AAAAAAAAHiQ/vAp8SOyCZ0g/s72-c/image%25255B2%25255D.png?imgmax=800" height="72" width="72" />
    <feedburner:origLink>http://www.troyhunt.com/2014/11/success-by-thousand-cuts-visual-studio.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-8216997081302223312</id>
    <published>2014-11-11T20:38:00.001+11:00</published>
    <updated>2014-11-11T21:12:03.269+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Speaking" />
    <title type="text">Hacking your API first at TechEd Australia 2014</title>
    <content type="html">&lt;p&gt;I’ve been doing a lot of talking about API security recently because frankly, there’s a lot to talk about. Those little web services that sit behind the rich client apps on our devices and increasingly behind our Internet of Things have a nasty habit of having some really serious vulnerabilities in them. I’m talking about everything from leaking data to allowing unauthorised users to perform actions they shouldn’t be allowed to all the way through to entirely useless SSL implementations because certificate validation has been disabled.&lt;/p&gt; &lt;p&gt;Pretty much every time I set out to look at the APIs being called by my devices, I find nasty stuff. Even just yesterday I was involved in reviewing a project that had the most heinous API crimes you can imagine; think along the lines of absolutely zero access controls on a service that processes some serious financial transactions. I didn’t find this through any high-tech means accessible to penetration testers who live in the underworlds, I found it using common dev tools in just a few minutes because I knew where look.&lt;/p&gt; &lt;p&gt;This is an area that I’m convinced is a significant enough threat to online security that I published a Pluralsight course on it just a couple of months ago – &lt;a href="http://www.troyhunt.com/2014/09/hack-your-api-first-learn-how-to.html"&gt;Hack Your API First&lt;/a&gt;. Further to that, I’m getting around talking about it at various events and last month that meant Microsoft’s TechEd in both Melbourne and Sydney, the former of which is now online for you to view here:&lt;/p&gt;&lt;iframe src="//channel9.msdn.com/Events/TechEd/Australia/2014/DPP210/player?h=540&amp;amp;w=960" frameborder="0" scrolling="no" style="height: 540px; width: 960px" allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;Oh – and if you’d like to watch that Pluralsight course for free, just get on over to &lt;a href="http://www.troyhunt.com/2014/10/find-crazy-stuff-in-mobile-app.html"&gt;this blog post that has a little challenge in it&lt;/a&gt;, leave your comment and I’ll get one right over to you!&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/BKofjxP2OZY" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/8216997081302223312" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/8216997081302223312" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/BKofjxP2OZY/hacking-your-api-first-at-teched.html" title="Hacking your API first at TechEd Australia 2014" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <feedburner:origLink>http://www.troyhunt.com/2014/11/hacking-your-api-first-at-teched.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-8843585292054419740</id>
    <published>2014-10-30T20:42:00.001+11:00</published>
    <updated>2014-10-30T21:15:25.825+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Speaking" />
    <title type="text">10 email security fundamentals for everyday people</title>
    <content type="html">&lt;p&gt;A couple of weeks back, &lt;a href="http://www.smh.com.au/nsw/barry-spurr-emails-investigated-by-university-of-sydney-20141016-1179kj.html"&gt;this bloke hit the news&lt;/a&gt; when his private emails were leaked and disclosed that he was fond of, shall we say, a very “colonial” vernacular when it comes to talking about our indigenous people:&lt;/p&gt; &lt;p&gt;&lt;img width="620" height="348" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="University of Sydney Professor Barry Spurr" src="http://lh3.ggpht.com/-vJKOHZgWfNM/VFIH8-V99ZI/AAAAAAAAHh4/FJ7Q_TKNjdk/14145912076062.jpg?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;That he is (was?) a professor at a university would normally suggest that he’s a pretty switched on guy, but the evidence is clearly to the contrary.&lt;/p&gt; &lt;p&gt;Speaking of people we’d normally assume to have above average intelligence, you’d probably not expect a Senator to offer a foreign athlete a handful of taxpayer funds to travel over here and then suggest that he be “compensated for the long haul, sexually of course”:&lt;/p&gt; &lt;p&gt;&lt;img width="620" height="348" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Senator Nova Peris" src="http://lh4.ggpht.com/-860YECWqjy8/VFIH9sMvqqI/AAAAAAAAHiA/fvuUm4BJEtY/14145912075452.jpg?imgmax=800" border="0"&gt;&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt; &lt;p&gt;But here we are; otherwise smart people with dumb email habits. We don’t know exactly how dumb as we don’t know exactly how the emails were “leaked”, but we do know plenty about how everyday people should be securing their emails. I had &lt;a href="http://www.smh.com.au/digital-life/consumer-security/how-to-keep-emails-private-and-avoid-embarrassing-leaks-20141029-11djxi.html"&gt;a bunch of them in the news today&lt;/a&gt; plus this piece that &lt;a href="http://www.sbs.com.au/thefeed/blog/2014/10/30/how-do-email-leaks-happen"&gt;just went to air on Aussie TV&lt;/a&gt;:&lt;/p&gt;&lt;iframe name="sbsVideo" width="100%" height="480" src="http://www.sbs.com.au/ondemand/video/single/349789763585/?source=drupal&amp;amp;vertical=thefeed" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt; &lt;p&gt;Let me share some more fundamentals on how to keep bigotry and extra marital affairs private or for those of you with more common sense than a professor and a senator, how to keep every day personal communications out of the hands of others. &lt;/p&gt; &lt;h4&gt;1. Think before you forward or CC&lt;/h4&gt; &lt;p&gt;Unlike a puppy, email is forever. Once you send it, it’s gone and there’s no guarantee of getting it back, even when you “think” both parties have deleted it. You never know who will intercept it (hi NSA!), you never know where it’s been backed up to nor where it’s been stored offline in the case of disaster recovery (for example, tape backups). The only safe assumption is that it will exist forever and be irretrievable because that just may be the case.&lt;/p&gt; &lt;h4&gt;2. Be cautious of auto-complete and triple-check mail recipients&lt;/h4&gt; &lt;p&gt;I was involved in a lovely to and fro with a bunch of people about a commercial project just the other day. They discussed matters of a financial nature and other sensitive corporate secrets. They copied the wrong Troy. It took them a dozen “reply alls” to realise. This is dead easy to do when the email client auto-completes names and even easier to do when you’re on a mobile device using your stubby fingers. Always, &lt;em&gt;always&lt;/em&gt; check you’ve got the right recipient, particularly when the message is sensitive.&lt;/p&gt; &lt;h2&gt;3. Use a strong, unique password&lt;/h2&gt; &lt;p&gt;Email is the skeleton key to your online accounts. Once an attacker is in there, it’s game on for every other online asset you have from shopping to social to banking. “Strong” means a combination of letters (upper and lower case), numbers, symbols and above all, not guessable (passwords with names and birthdates are key culprits). Unique is just that – you haven’t used it anywhere else. Ever. Ideally, get a good password manager like 1Password because ultimately, &lt;a href="http://www.troyhunt.com/2011/03/only-secure-password-is-one-you-cant.html"&gt;the only secure password is the one you can’t remember&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;4. Use 2 factor authentication&lt;/h4&gt; &lt;p&gt;When all that is between you and an attacker getting into your account is a single password, you’re running a risk that is far greater than what you need be taking. A password is one factor – “something you know”. Now if we add something you &lt;em&gt;have&lt;/em&gt; such as your mobile phone and the email service verifies your identity when you first log on by sending an SMS to that thing you have, the security position of your email changes fundamentally. It’s easy to set up too: &lt;a href="https://www.google.com.au/landing/2step/"&gt;here’s how to do it with Gmail&lt;/a&gt;, &lt;a href="http://windows.microsoft.com/en-au/windows/two-step-verification-faq"&gt;here’s how to do it with Microsoft&lt;/a&gt; and while you’re there, do Twitter, Facebook, eBay etc. (Incidentally, you may see the terms “two factor” and “two step” used interchangeably and whilst there are differences, they’re generally intended to mean the same thing – a password and a token or SMS on something you have.)&lt;/p&gt; &lt;h4&gt;5. Email is not a secure storage facility&lt;/h4&gt; &lt;p&gt;If ever you needed evidence that your email is “read” by others, look no further than the fact that &lt;a href="http://www.businessinsider.com.au/google-is-being-sued-for-reading-email-to-target-ads-2013-9"&gt;Google goes through your mail in order to target ads at you&lt;/a&gt;. Do not store passwords in email. Do not store personal financial information in email. Do not store the fact that you’re cheating on your husband and using your political influence and taxpayer dollars to carry on an affair with an overseas athlete in email. Even when you have a strong unique password and two factor authentication, apply the “defence in depth” mindset and don’t take the risk of storing this stuff in your inbox.&lt;/p&gt; &lt;h4&gt;6. There’s always email encryption, but it’s rarely user friendly&lt;/h4&gt; &lt;p&gt;There exists such a thing as encrypted email and you can indeed secure the contents of the mail between the sender and the intended recipient. Software such as &lt;a href="http://www.gpg4win.org/"&gt;Gpg4win&lt;/a&gt; goes some way to making email encryption more accessible, but it’s not often used outside those in technical circles protecting extra sensitive messages or journalists offering sources a secure way of communicating with them (for example &lt;a href="http://bengrubb.com/my-pgp-key/"&gt;Ben Grubb publishes his PGP key&lt;/a&gt;). The problem remains a lack of native support across consumer email services and the fact that even in the presence of more secure alternatives, sex talk online or racist rants are rarely preceded by the sender fully thinking through the ramifications of their actions.&lt;/p&gt; &lt;h4&gt;7. Your corporate email is not “your” email&lt;/h4&gt; &lt;p&gt;You know that email address of yours that’s me@myemployer.com? Yeah, that’s not yours but you knew that already because you carefully read through all the lengthy employee indoctrination material, right? Treat corp mail as just that – the mail of the corporation – and always work with the assumption that they have access to all of it, whether they be legally entitled to it in your jurisdiction or not. It exists on their machines, it transits through their networks and they usually have the legal right to intercept and read it.&lt;/p&gt; &lt;h4&gt;8. Email rights management tools are not fool proof&lt;/h4&gt; &lt;p&gt;More advanced email services (usually within a corporate or government environment) sometimes offer facilities to help protect sensitive information from risks such as the email being forwarded or printed. Features like &lt;a href="http://technet.microsoft.com/en-us/library/jj983436(v=exchg.150).aspx"&gt;Microsoft’s Information Rights Management&lt;/a&gt; can be great for protecting discussions about corporate strategy, but they won’t stop your co-workers from thinking you’re a racist idiot and taking a photo of your email on their screen. It is safer not to be a racist idiot via email and even safer again not to be one in the first place.&lt;/p&gt; &lt;h4&gt;9. Take your illicit love affairs onto a separate email account&lt;/h4&gt; &lt;p&gt;Yes, yes, I know it’s wonderfully convenient to be able to email your mistress from the same account from which you email your wife, but it’s not real smart. The ethics of this behaviour aside, mixing communications that are highly sensitive alongside everyday chatter is fundamentally risky. Keep it off in a separate account with separate credentials and preferably with a separate provider. Keep it focussed on the one mistress (or other highly private equivalent) and use separate accounts if you’re crazy enough to have multiple simultaneous affairs.&lt;/p&gt; &lt;h4&gt;10. You cannot lose what you have not sent&lt;/h4&gt; &lt;p&gt;This position is often referred to as “victim blaming”, that is it’s a dispersion cast at the accuser for saying it’s the victim’s fault for having sent the mail in the first place. But take the emotional catch-phrases out of it and the fact remains that if you don’t send it, you can’t lose it. Same deal with nudie pics – if you don’t take them then they can’t end up being shared on the web. I prefer that approach to the potential embarrassment which then grants me the ability to use a righteous phrase in my defence, but perhaps that’s just me.&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/nQQ6F8-ZVwc" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/8843585292054419740" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/8843585292054419740" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/nQQ6F8-ZVwc/10-email-security-fundamentals-for.html" title="10 email security fundamentals for everyday people" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <media:thumbnail
        xmlns:media="http://search.yahoo.com/mrss/" url="http://lh3.ggpht.com/-vJKOHZgWfNM/VFIH8-V99ZI/AAAAAAAAHh4/FJ7Q_TKNjdk/s72-c/14145912076062.jpg?imgmax=800" height="72" width="72" />
    <feedburner:origLink>http://www.troyhunt.com/2014/10/10-email-security-fundamentals-for.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-4550392699717951378</id>
    <published>2014-10-24T18:40:00.001+11:00</published>
    <updated>2014-10-24T18:40:09.152+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="China" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <title type="text">Get Cloak. Go Dark. VPN’ing out from the Great Firewall of China</title>
    <content type="html">&lt;p&gt;Let’s go through just some of the ways you can hand your valuable datas over to people that want to get somewhere in between you and whatever service it is you want to talk to at the other end.&lt;/p&gt; &lt;p&gt;You can get &lt;a href="http://www.troyhunt.com/2013/04/the-beginners-guide-to-breaking-website.html"&gt;pineappled&lt;/a&gt; and certainly that’s been a favourite of mine to demonstrate because it’s just so damn easy (it’s also kinda cool, if I’m honest).&lt;/p&gt; &lt;p&gt;The router you connect through can be &lt;a href="http://nakedsecurity.sophos.com/2012/10/01/hacked-routers-brazil-vb2012/"&gt;pwned and its DNS changed to help pay for Brazilian hookers&lt;/a&gt; (yes, you read that right).&lt;/p&gt; &lt;p&gt;The &lt;a href="http://www.theregister.co.uk/2011/01/25/tunisia_facebook_password_slurping/"&gt;Tunisian government can just siphon up all your packets&lt;/a&gt; as they pass through the ISPs under their control. Ok, maybe you’re not in Tunisia, but I think we’re all a little wary of the American government lately too…&lt;/p&gt; &lt;p&gt;And so on and so forth. I saw a great story today on &lt;a href="https://medium.com/matter/heres-why-public-wifi-is-a-public-health-hazard-dd5b8dcb55e6"&gt;the risks of public wifi&lt;/a&gt; which puts the threat of a man in the middle attack (henceforth an MitM attack) into perspective. As an iOS user, when I read stuff like &lt;a href="http://motherboard.vice.com/read/chinas-massive-icloud-hack-is-so-obvious-it-may-be-a-message-to-apple"&gt;China's Massive iCloud Hack&lt;/a&gt;, I get a little concerned. As an iOS user travelling to China, I get a VPN and that’s where Cloak comes in.&lt;/p&gt; &lt;p&gt;There are many consumer-orientated VPN service and I’m told that many of them are excellent, which I’m sure they are. I decided to give &lt;a href="https://www.getcloak.com/"&gt;Cloak&lt;/a&gt; a go in part because their website made it super simple to understand, in part because the Twitter account actually reached out and made contact when I mentioned it (pro tip: this matters to a lot of people) and also in part because it has a free intro and good pricing plan. It was only after I started using it that I found some other neat tricks as well. It’s a dead simple app and it looks like this:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="The Cloak app" src="http://lh4.ggpht.com/-P4DdsqHaR2Y/VEoB7LZVJuI/AAAAAAAAHfo/HVcO21y0_D0/Photo-24-10-2014-09-11-17_thumb.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;This is really, really simply and that’s what really got me excited about Cloak, not much more than the plan you’re on and a few basic settings. Let’s go through them.&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt; &lt;h4&gt;Trusted networks&lt;/h4&gt; &lt;p&gt;Cloak has this concept of a “Trusted Network”, that is ones that you don’t feel you need a VPN service on. Keep in mind what this does and does not mean though; I “trust” my home network but once the traffic goes out the door on copper wire, it’s game on. Conversely, when you’re on VPN it’s game on when the packets hit the exit node at the VPN provider. Still a risk, just different. My trusted networks look like this:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="My personal trusted networks" src="http://lh4.ggpht.com/-s7-xI4cIxao/VEoB9bmQbmI/AAAAAAAAHfw/sxREb7AG6zQ/Photo-24-10-2014-09-14-54%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Note how cellular networks are trusted by default. Note also that this doesn’t mean you can always trust cellular networks (hi Iran!), but they usually don’t pose the same risk as your random local cafe wifi network, particularly the ones with zero encryption on them.&lt;/p&gt; &lt;p&gt;Anyway, the idea that by defining a whitelist of trusted networks you can have Cloak auto-enable when you connect to an untrusted network. This is enormously cool as it allows you to approach free wireless hotspots with reckless abandon. Ok, maybe not &lt;em&gt;too&lt;/em&gt; reckless, you need a connection before the VPN kicks in and there’s always that little gap where traffic may traverse an unencrypted network, but it certainly gives you the option to browse via foreign networks with a confidence that you wouldn’t otherwise have.&lt;/p&gt; &lt;p&gt;When you connect to a network that’s not on Cloak’s whitelist, you’ll see the VPN connecting in the settings:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="VPN connecting..." src="http://lh3.ggpht.com/-xzULrEa7Bcw/VEoB-6iBVQI/AAAAAAAAHf4/aJJaibwJH3U/Photo-24-10-2014-08-20-23%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Sometimes it’s mere seconds, other times… it never happens. &lt;a href="http://en.wikipedia.org/wiki/VPN_blocking"&gt;China in particular is notorious for blocking VPNs&lt;/a&gt; (it turns they’re just a little too effective for the government’s liking sometimes) and I found it to be very unstable a lot of the time. Then again, I found my corporate VPN service on my laptop to be unstable and the hotel wifi to be generally flaky so don’t let that cast a dispersion on Cloak. In earlier testing, I found Cloak rock solid all day long on stable wireless networks so I’m pretty sure where the blame for instability lies.&lt;/p&gt; &lt;p&gt;Once connected, you get iOS’ standard VPN indicator up next to the network connection indicator:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="69" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="VPN being shown next to the wireless network indicator" src="http://lh4.ggpht.com/-F8OWzL7L-Hw/VEoCAAPRJlI/AAAAAAAAHgA/zjn8YXQhgqE/Photo-24-10-2014-09-11-17%25255B8%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;You can confirm the connection is secured by jumping back over to the Cloak app. This was my first test when I hit the airport in Sydney:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Connected to Qantas-Lounge" src="http://lh6.ggpht.com/-_O6oIfVzahM/VEoCBijltII/AAAAAAAAHgI/SsInV_MOJYc/Photo-20-10-2014-07-05-48%25255B2%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;That’s it – now everything between the device and the VPN provider is encrypted.&lt;/p&gt; &lt;h4&gt;Speed&lt;/h4&gt; &lt;p&gt;You’re always going to take a hit on speed with a VPN, you &lt;em&gt;have&lt;/em&gt; to. It’s not just the encryption process, but now rather than going from your service provider to destination address via the most efficient route possible, you’re going from your service provider to a VPN exit node to the destination address. How far that exit node is from either the origin or the target can have an impact on speed.&lt;/p&gt; &lt;p&gt;Here’s a good example: before leaving Sydney I enable Cloak over my 4G connection and ran a speed test. Here’s no VPN:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="40.33Mbps download with no VPN" src="http://lh5.ggpht.com/-KG9xNyI8sxs/VEoCDGuGScI/AAAAAAAAHgQ/VaV-klHK7-4/Photo-19-10-2014-12-10-06%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Now here’s Cloak in action:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="30.11Mbps download with VPN enabled" src="http://lh5.ggpht.com/-y0ra6laH1PA/VEoCEsSwyjI/AAAAAAAAHgY/8zP2Cmprv0E/Photo-19-10-2014-12-11-01%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Keeping in mind that speed tests can fluctuate at the best of times, the latency has more than tripled and consequently I’ve lost a quarter of my down speed and about 15% of my up speed. But I’m still getting 30Mbps over Cloak which frankly, is pretty darn good (at least by Australian network standards).&lt;/p&gt; &lt;h4&gt;Transporter destinations&lt;/h4&gt; &lt;p&gt;The idea of a transporter destination is an exit node for the VPN. If I exit through Sydney then firstly, it’s a short hop if I’m already there and secondly, I get a Sydney IP address accompanying my outbound packets. Change the transporter destination and I get a different IP in a different location.&lt;/p&gt; &lt;p&gt;Here’s what’s available:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="List of all transporter locations for Cloak" src="http://lh4.ggpht.com/-Ts789QnltUo/VEoCGBjlHMI/AAAAAAAAHgg/VE5TyePd46M/Photo-24-10-2014-09-28-10%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Once I select, say, “Australia”, I’ll need to update the device with a new profile:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Litst of profiles Cloak wants to install" src="http://lh5.ggpht.com/-Utk2wy__tks/VEoCIzWT5TI/AAAAAAAAHgo/UkbcRgpjyy4/Photo-24-10-2014-09-35-00%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;We can see here that there are now two VPN settings: the Australia one I just selected and “Fastest Available” which is the default position. This just makes sense – make things go through what is inevitably the closest exit node or alternatively, specify your own which may be some distance away but gets you outbound in your country of choice.&lt;/p&gt; &lt;p&gt;That done, I can now select the VPN profile I’d prefer from the iOS settings:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Selecting the Sydney exit node" src="http://lh5.ggpht.com/-To_eX4KoMm8/VEoCKHw2HGI/AAAAAAAAHgw/cbNPnCbFI98/Photo-24-10-2014-09-39-57%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Which means that when I check my IP address, it feels just like home:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Sydney IP address shown in Cloak" src="http://lh4.ggpht.com/-T8HQcCx0ohw/VEoCLiFv85I/AAAAAAAAHg4/UK3VA0Cscmc/Photo-24-10-2014-09-54-19%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Go back to the fastest location and I’m in Japan which would be the closest node to my Beijing internet connection:&lt;/p&gt; &lt;p&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Japanese IP address shown" src="http://lh5.ggpht.com/--QvWTQpd2yQ/VEoCNGP6FII/AAAAAAAAHhA/W0Wk3aQKXJU/Photo-24-10-2014-09-53-39%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Switching takes only a few seconds so it’s a very, very low-friction exercise. I ended up leaving Cloak connecting via the fastest possible route because for my purposes, my main concern is keeping the clear traffic off China networks (because we really trust the American ones that much more…) and getting access to the services I want which are accessible from pretty much everywhere outside China.&lt;/p&gt; &lt;p&gt;Exiting from a location other than one in close proximity can be enormously advantageous. For example, China isn’t real keen on Twitter and Facebook so I don’t want my traffic exiting from anywhere there, instead I want it going out from somewhere more friendly to free-flowing social media; Japan isn’t too far away and doesn’t impose the same restrictions.&lt;/p&gt; &lt;h4&gt;Syncing&lt;/h4&gt; &lt;p&gt;I use both my iPhone and my iPad &lt;em&gt;extensively&lt;/em&gt; and one of the things I like about the Apple ecosystem (and to be fair, others do this too), is the unified experience across my devices. My bookmarks, my photos and most of my iThings line up nicely across the two. Cloak also syncs settings and once a change is made, prompts me to sync things via a notification at the bottom of the screen:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-IXWDTUnOFBQ/VEoCOVTKpnI/AAAAAAAAHhI/AIhR0UhdVmw/s1600-h/Photo-24-10-2014-09-28-48%25255B2%25255D.png"&gt;&lt;img width="450" height="87" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="&amp;quot;Settings out of sync&amp;quot;" src="http://lh4.ggpht.com/-RluOBw1Zm_w/VEoCPnsH3eI/AAAAAAAAHhQ/F09Q1ObkA4s/Photo-24-10-2014-09-28-48_thumb.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I sync, open Cloak on the iPad and see this:&lt;/p&gt; &lt;p&gt;&lt;img width="800" height="600" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Syncing settings on the iPad" src="http://lh6.ggpht.com/-RAxmyIHJeSw/VEoCRIVnsWI/AAAAAAAAHhY/mygdv1G4zRw/Photo-24-10-2014-10-03-33%25255B3%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;Tapping the notification in the footer downloads the updated profiles and now everything lines up just nicely across devices. In this case, I now have the Australian transporter destination on the tablet.&lt;/p&gt; &lt;h4&gt;Plans&lt;/h4&gt; &lt;p&gt;I mentioned being keen on Cloak because I could get a free demo, but frankly the cost is inconsequential anyway. I’m prone to comparing the cost of cheap things to my cappuccino budget and for a week away in China, we’re looking at less than two cups:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-30FAJw8atT0/VEoCTbGsNzI/AAAAAAAAHhg/4SIZlCdSgi0/s1600-h/Photo-22-10-2014-07-22-52%25255B2%25255D.png"&gt;&lt;img width="450" height="800" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Cloak passes starting at $4.99 for a week with unlimited data" src="http://lh6.ggpht.com/-kJtEeGPUBns/VEoCU9VAO8I/AAAAAAAAHho/6tT6EzNjc0I/Photo-22-10-2014-07-22-52_thumb.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The thing I love about this model is the “Week pass”. I spend most of my time at home on trusted networks so I don’t need an ongoing subscription, but I also regularly travel to places where I don’t trust the network or I need to “be” in a different country. Being able to just fire it up for a week fits my movements just perfectly. Note there’s also unlimited data during that time too so it’s not going to chop me off if I decide to, say, update iOS on all my devices while travelling (which incidentally, I did just this week).&lt;/p&gt; &lt;h4&gt;What a VPN won’t get you&lt;/h4&gt; &lt;p&gt;Let me touch briefly on this and it’s by no means specific to Cloak. A VPN service like this won’t get you total anonymity. Yes, it can protect your data between your device and Cloak’s services, but remember you’ve identified yourself to Cloak (you need credentials) and they are now handling all your packets. They get subpoenaed for their records and you’d have to work on the assumption that your browsing habits would be accessible to law enforcement in their jurisdiction.&lt;/p&gt; &lt;p&gt;Your data exiting their VPN also has no implicit encryption. There are various precedents of data being intercepted well up the request pipeline (hi NSA!) and you have to work on the assumption that everything between Cloak and the service you’re connecting to is fair game.&lt;/p&gt; &lt;p&gt;As a rule of thumb, I don’t use VPNs for anything I wouldn’t normally do from my network at home. I don’t assume anonymity – there’s &lt;a href="http://en.wikipedia.org/wiki/Tor_(anonymity_network)"&gt;Tor&lt;/a&gt; for that and if you’re really keen, you can browse anonymously via that through your Cloak VPN.&lt;/p&gt; &lt;h4&gt;Get Cloak&lt;/h4&gt; &lt;p&gt;I wrote this because I go on about transport security enough that I wanted something I could recommend from firsthand experience in a location where you really need it. The only discussion I’ve had with the Cloak guys was &lt;a href="https://twitter.com/troyhunt/status/522993171865669632"&gt;via Twitter&lt;/a&gt; so this is as independent and as unincentivised as it gets.&lt;/p&gt; &lt;p&gt;Cloak rocks, &lt;a href="https://www.getcloak.com/"&gt;get it&lt;/a&gt;.&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/knoVfs8raiU" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/4550392699717951378" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/4550392699717951378" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/knoVfs8raiU/get-cloak-go-dark-vpning-out-from-great.html" title="Get Cloak. Go Dark. VPN’ing out from the Great Firewall of China" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <media:thumbnail
        xmlns:media="http://search.yahoo.com/mrss/" url="http://lh4.ggpht.com/-P4DdsqHaR2Y/VEoB7LZVJuI/AAAAAAAAHfo/HVcO21y0_D0/s72-c/Photo-24-10-2014-09-11-17_thumb.png?imgmax=800" height="72" width="72" />
    <feedburner:origLink>http://www.troyhunt.com/2014/10/get-cloak-go-dark-vpning-out-from-great.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-5039499495524454429</id>
    <published>2014-10-22T23:23:00.001+11:00</published>
    <updated>2014-10-22T23:23:16.907+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Speaking" />
    <title type="text">.NET Rocks Podcast: The Security of IoT</title>
    <content type="html">&lt;p&gt;You know how you always wanted a fork with an ARM processor that could upload data wirelessly over the internet? C’mon, you know you want it and now you can get a &lt;a href="http://www.hapi.com/product/hapifork"&gt;HAPIfork&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Or how about your light globes? Yes, &lt;a href="http://au.lifx.co/"&gt;LIFX totally rocks&lt;/a&gt; but no, I wasn’t so keen on the idea once I learned &lt;a href="http://www.smh.com.au/digital-life/consumer-security/security-vulnerability-found-in-lifx-smart-light-bulbs-exposes-home-wifi-passwords-20140709-zt12p.html"&gt;your neighbours could pwn your wifi through them&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This brave new “Internet of Things” world is equal parts awesome and scary and there seems to be no limit to the extent we’ll go to connect our things. We connect these things to the internet via APIs and of course at the end of the day, an API is not much more than a website without a user interface. Because it’s a website it has website vulnerabilities yet when we put these APIs behind our “things”, they’re that much harder to monitor in terms of risks, unless you know where to look…&lt;/p&gt; &lt;p&gt;This is why I wrote the Pluralsight course titled &lt;a href="http://pluralsight.com/courses/table-of-contents/hack-your-api-first"&gt;Hack Your API First&lt;/a&gt;. I’ve explained &lt;a href="http://www.troyhunt.com/2014/09/hack-your-api-first-learn-how-to.html"&gt;why this course rocks&lt;/a&gt; before so I won’t dwell on it here, but I did get a good chance to talk to the awesome duo from .NET Rocks again the other day on the security implications of IoT, what it means to connect all our things and why you may no longer be able to trust your toilet.&lt;/p&gt; &lt;p&gt;The podcast is &lt;a href="http://www.dotnetrocks.com/default.aspx?showNum=1051"&gt;over on the .NET Rocks website&lt;/a&gt; or embedded here:&lt;/p&gt; &lt;p&gt;&lt;audio controls="" preload="metadata"&gt;&lt;source type="audio/mpeg" src="http://s3.amazonaws.com/dnr/dotnetrocks_1051_iotsecurity.mp3"&gt;&lt;/audio&gt;&lt;/p&gt; &lt;p&gt;Enjoy!&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/EObNv0WapsU" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/5039499495524454429" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/5039499495524454429" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/EObNv0WapsU/net-rocks-podcast-security-of-iot.html" title=".NET Rocks Podcast: The Security of IoT" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <feedburner:origLink>http://www.troyhunt.com/2014/10/net-rocks-podcast-security-of-iot.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-4930173938223118998</id>
    <published>2014-10-21T18:26:00.001+11:00</published>
    <updated>2014-10-24T17:55:31.886+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Azure" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <title type="text">Disabling SSL 3 in Azure websites (and why it doesn’t look like you have)</title>
    <content type="html">
      &lt;p&gt;Just a quick one as it’s mostly explained in &lt;a href="http://azure.microsoft.com/blog/2014/10/19/how-to-disable-ssl-3-0-in-azure-websites-roles-and-virtual-machines/"&gt;How to Disable SSL 3.0 in Azure Websites, Roles, and Virtual Machines&lt;/a&gt;, but there are a few bits worth adding. Oh – just in case POODLE was news to you, go back and read my post on &lt;a href="http://www.troyhunt.com/2014/10/everything-you-need-to-know-about.html"&gt;Everything you need to know about the POODLE SSL bug&lt;/a&gt; from last week.&lt;/p&gt; &lt;p&gt;Back to Nazim’s guidance above on Azure websites, you can either install a site extension to disable SSL 3 or make a URL rewrite rule that looks at a custom header in the request. My view is that the latter is always preferable as it puts it right into the config of the site. Deploy it somewhere else later and the config is still good (assuming it’s an Azure website that recognises the setting). I can see some people preferring the site extension as it means you don’t need to redeploy the site, but if you’re worried about that then you probably have some bigger problems to deal with!&lt;/p&gt; &lt;p&gt;Now, before deploying the fix, let’s make sure that SSL 3 is indeed enabled because personally, I like to see evidence that changes I’m making actually do something. Here’s a &lt;a href="https://www.ssllabs.com/ssltest"&gt;Qualys SSL Labs&lt;/a&gt; scan of the site before any changes:&lt;/p&gt; &lt;p&gt;&lt;img width="880" height="685" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="An A- rating on SSL labs with SSL 3 being reported as enabled" src="http://lh5.ggpht.com/-iG5KBT83YjU/VEYKfT4RthI/AAAAAAAAHeo/iiH6_46yBcE/image_thumb%25255B7%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt; &lt;p&gt;Here we can see SSL 3 still alive and kicking and indeed a very handy warning about the POODLE risk. Now let’s take the fix which is a URL rewrite rule which looks just like this:&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: blue"&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style="background: white; color: green"&gt;Defending against POODLE &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;--&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;rule &lt;/span&gt;&lt;span style="background: white; color: red"&gt;name&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;Block SSL3.0&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;patternSyntax&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;Wildcard&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;stopProcessing&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;true&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;match &lt;/span&gt;&lt;span style="background: white; color: red"&gt;url&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;*&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;/&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;conditions&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;add &lt;/span&gt;&lt;span style="background: white; color: red"&gt;input&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;{HTTP_X_FORWARDED_SSL30}&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;pattern&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;1&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;/&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;conditions&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;action &lt;/span&gt;&lt;span style="background: white; color: red"&gt;type&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;CustomResponse&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;statusCode&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;403&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;subStatusCode&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;900&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;statusReason&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;Forbidden&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: red"&gt;statusDescription&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;=&lt;/span&gt;&lt;span style="background: white; color: black"&gt;"&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;SSLv3 connections are forbidden by this site&lt;/span&gt;&lt;span style="background: white; color: black"&gt;" &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;/&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;rule&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;p&gt;This is just Nazim’s config and it’s a very straight forward rewrite rule. It looks at the request coming to the site and if it has a header named “{HTTP_X_FORWARDED_SSL30}” it simply returns an HTTP 403. Why? Good question…&lt;/p&gt;
      &lt;p&gt;It all has to do with Azure websites being a PaaS offering where whilst you have control over the site, you don’t have control over the underlying OS configuration and that’s the place you’d normally disable SSL 3. Adding to that, SSL is terminated upstream of the server the site is actually running on and it’s done so on shared infrastructure (this is also where the header above is added to the request before it hits the website). The bottom line is that you, as an individual, have no control over the SSL configuration. By adding that new header when SSL terminates, the website can be aware of which version of the protocol was used and act accordingly. It’s a pretty neat little trick actually.&lt;/p&gt;
      &lt;p&gt;So why not just turn it off altogether? I mean disable it at the SSL endpoint in front of the Azure websites? Not much will break anyway as nobody is using it any more, right? &lt;em&gt;Almost&lt;/em&gt; nobody and therein lies the problem. As it turns out, people get a bit cranky if you break their things, even if it’s only a tiny percentage of people and a tiny percentage of things. Clearly the Azure guys have looked at the situation and weighed up the impact of turning it off altogether versus what might happen if it’s exploited and felt that the best middle ground was to make it configurable. Yes, this means that taking no action leaves you vulnerable and it’s not as aggressive as, say &lt;a href="https://blog.cloudflare.com/sslv3-support-disabled-by-default-due-to-vulnerability/"&gt;CloudFlare’s approach&lt;/a&gt;, but certainly this would have been a measured decision. SSL 3 will die a natural death at some point and inevitably be disabled full stop, but clearly Microsoft thinks it’s just a bit too early to do that across the board on Azure.&lt;/p&gt;
      &lt;p&gt;Moving on, I’ve pushed the config change, let’s check that SSL Labs scan now:&lt;/p&gt;
      &lt;p&gt;&lt;img width="880" height="685" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="An A- rating on SSL labs with SSL 3 being reported as enabled" src="http://lh5.ggpht.com/-iG5KBT83YjU/VEYKfT4RthI/AAAAAAAAHeo/iiH6_46yBcE/image_thumb%25255B7%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt;
      &lt;p&gt;Uh, ok, what gives? We’re still POODLE’able!&lt;/p&gt;
      &lt;p&gt;Here’s the thing – when you “disable” SSL 3 using this approach, you’re not really disabling it. Remember how I said SSL terminates upstream of the website and you’ve really only got any control over the site itself? From the scan point of view, the SSL connection using v 3 is working as it’s successfully terminating at the appliance in front of the Azure website. That the website will then respond with a 403 does not appear to affect this test.&lt;/p&gt;
      &lt;p&gt;So what’s to be done? Well firstly, let’s make sure the change is actually working and that’s a simple task. Here’s the website with the URL redirect loaded in Internet Explorer:&lt;/p&gt;
      &lt;p&gt;&lt;img width="1159" height="625" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Azure website successfully loading" src="http://lh6.ggpht.com/--PkhSgHq23Y/VEYKjPRXYnI/AAAAAAAAHe4/kohhmeO0MGA/image_thumb%25255B4%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt;
      &lt;p&gt;Business as usual there, that’s just fine. Now let’s tweak some settings:&lt;/p&gt;
      &lt;p&gt;&lt;img width="629" height="505" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Only allowing SSL 3 to run in IE" src="http://lh6.ggpht.com/-eyXIEhtJuV8/VEYKmEavLhI/AAAAAAAAHfI/YvIayKm7crU/image_thumb%25255B2%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt;
      &lt;p&gt;See where this is going? We’re forcing IE to talk over SSL 3 only (it’s the easiest to configure in Microsoft’s browser), let’s see how that works out now:&lt;/p&gt;
      &lt;p&gt;&lt;img width="1159" height="625" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="A 403 response in Internet Explorer" src="http://lh4.ggpht.com/-WRQtg2i9Qi0/VEYKpKKBORI/AAAAAAAAHfY/krB4aITQ6qU/image_thumb%25255B6%25255D.png?imgmax=800" border="0"&gt;&lt;/p&gt;
      &lt;p&gt;And there’s a 403 – the website has not processed the request as it normally would when it supported SSL 3, rather the URL rewrite rule has kicked in and responded first.&lt;/p&gt;
      &lt;p&gt;So does this actually solve the problem? Kind of. POODLE is exploited by looking at how the web server responds to requests sent via SSL 3 so in that regard, this problem is nipped (ok, just one canine analogy) in the bud. On the other hand, an SSL connection can still be “made” in that the negotiation with the SSL end point can still occur over v 3. It doesn’t matter whether it’s the Qualys SSL Labs test or even just &lt;a href="http://blog.adityapatawari.com/2014/10/how-to-check-for-ssl-poodle-sslv3-bug.html"&gt;a direct connection using OpenSSL&lt;/a&gt;, you’ll likely find that many of these tests will report SSL 3 as being enabled as they’re simply looking for the handshake over v 3 to confirm or deny its presence.&lt;/p&gt;
      &lt;p&gt;Where the challenge may well lie for many people is that they will be told their Azure website still supports SSL 3 and therefore fails whatever corporate policy has been devised to deal with POODLE. Some explanation may well be required here: “Yes, a successful handshake can still occur over SSL 3, but no, the site is no longer at risk of a POODLE attack as it won’t return a valid response”. Until the earlier mentioned balance Microsoft have struck around not killing those few remaining SSL 3 dependencies, some objectivity will be required by those assessing the risk on Azure websites.&lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;Update, 23 Oct 2014:&lt;/strong&gt; There's been some great discussion in the comments and it's quite rightly raised issues that I haven't addressed well so let me clarify here now:&lt;/p&gt;
      &lt;p&gt;
      By responding with a 403 when a resource is requested via SSL 3, the website will no longer present a login page and no longer offer the opportunity for a cookie to be set and consequently stolen. Of course it doesn't &lt;em&gt;have&lt;/em&gt; to respond with a 403, now that there's a request header that can be read you can implement whatever behaviour you like but as a default position, that certainly breaks the site to the extent that you can no longer login. However, it doesn't protect requests that &lt;em&gt;already have&lt;/em&gt; the cookie. By extension, it also doesn't protect users who don't have their connection downgraded during the login but &lt;em&gt;do&lt;/em&gt; after the login, whether that be by coincidence or clever hacker design.
      &lt;/p&gt;
      &lt;p&gt;
      The other thing worth noting is that the SSL Labs response does indicate something important: the RC4 cipher has been prioritised above CBC which is the vulnerable cipher in a POODLE attack. This is alluded to in the "POODLE mitigated" message above then explained further down the page. If someone gets MitM'd and their connection successfully downgraded to SSL 3 after they login and already have a cookie of value, they'll talk via RC4 which whilst acknowledged as having it's own issues, is not the cipher suite described in the advisory.
      &lt;/p&gt;
      &lt;p&gt;
      Ultimately, SSL 3 need to get disabled and as I've said above, this will inevitably happen at some point. Whilst the mitigations above aren't perfect, they do significantly raise the bar for an attack to be successful.
      &lt;/p&gt;
      &lt;p&gt;Further to this, see &lt;a href="http://azure.microsoft.com/blog/2014/10/19/how-to-disable-ssl-3-0-in-azure-websites-roles-and-virtual-machines/#comment-1648658581"&gt;Nazim's comments about disabling SSL 3 for Azure websites&lt;/a&gt;. He doesn't give a timeframe, but he does &lt;a href="http://azure.microsoft.com/blog/2014/10/19/how-to-disable-ssl-3-0-in-azure-websites-roles-and-virtual-machines/#comment-1646739442"&gt;state that it's high priority&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/W2SlHBHIot4" height="1" width="1"/&gt;
    </content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/4930173938223118998" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/4930173938223118998" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/W2SlHBHIot4/disabling-ssl-3-in-azure-websites-and.html" title="Disabling SSL 3 in Azure websites (and why it doesn’t look like you have)" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <media:thumbnail
        xmlns:media="http://search.yahoo.com/mrss/" url="http://lh5.ggpht.com/-iG5KBT83YjU/VEYKfT4RthI/AAAAAAAAHeo/iiH6_46yBcE/s72-c/image_thumb%25255B7%25255D.png?imgmax=800" height="72" width="72" />
    <feedburner:origLink>http://www.troyhunt.com/2014/10/disabling-ssl-3-in-azure-websites-and.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-8105427837160939037</id>
    <published>2014-10-17T19:14:00.001+11:00</published>
    <updated>2014-10-17T19:14:21.882+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Have I been pwned?" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Performance" />
    <title type="text">Measure, optimise then measure again: further refining “Have I been pwned?”</title>
    <content type="html">&lt;p&gt;As &lt;a href="http://www.troyhunt.com/2013/12/micro-optimising-web-content-for.html"&gt;I’ve written in the past&lt;/a&gt;, I put an awful lot of effort into making &lt;a href="https://haveibeenpwned.com/"&gt;Have I been pwned?&lt;/a&gt; (HIBP) fast. Not just a bit fast, &lt;em&gt;blisteringly&lt;/em&gt; fast and that includes &lt;a href="http://www.troyhunt.com/2014/09/10-things-i-learned-about-rapidly.html"&gt;when it’s under a huge amount of load&lt;/a&gt;. But there was something bugging me with the site when it came to performance and it was this:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-flyVhZEYZT4/VEDPgzf8_OI/AAAAAAAAHcg/AIgIWohCbPI/s1600-h/image2.png"&gt;&lt;img width="869" height="817" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="33 SVG images loaded on HIBP" src="http://lh3.ggpht.com/-X0GlLVKy1R8/VEDPh6_fo2I/AAAAAAAAHck/oOVYfytmEPo/image_thumb.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;That’s right, 33 images loaded on the front page. Yes they’re SVG and yes they’re tiny and yes they’re served from a CDN but you simply cannot get past the fact that the browser needs to make a heap of additional requests to load them. Granted, you could sprite them (yes, &lt;a href="http://www.sitepoint.com/use-svg-image-sprites/"&gt;you can do this with SVGs&lt;/a&gt;) but you can’t escape the additional bytes that need to be downloaded nor the additional rendering time in the browser (this is more significant then you might think – we’ll come back to this).&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt; &lt;p&gt;This model (each breach on the front page) worked fine when there were only a handful of them, but wouldn’t you know it, sites keep getting breached, data keeps adding up and more logos appear. I had to cap it.&lt;/p&gt; &lt;p&gt;Before making changes for the sake of perf, you &lt;em&gt;really&lt;/em&gt; want to measure things. Removing images should be an obvious win, but the web can work in funny ways sometimes. I went to &lt;a href="http://vimeo.com/97415381"&gt;Nik Molnar’s excellent talk at NDC earlier this year&lt;/a&gt; (watch the video, it rocks) and he showed things that make you entirely question many conventional wisdoms when it comes to website optimisation. (Great example – using bitmaps with shadow effects you’ve added via Photoshop rather than using CSS shadows.)&lt;/p&gt; &lt;p&gt;One of the easiest measurements going is the &lt;a href="http://tools.pingdom.com/fpt/"&gt;Pingdom tools&lt;/a&gt;. Throw it a URL, give a few seconds and you get something like this:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-DZAHB_ApTiA/VEDPiRpPHFI/AAAAAAAAHcs/qDvp4VLXDag/s1600-h/image11.png"&gt;&lt;img width="624" height="225" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Pingdom tools result for HIBP - 90/100" src="http://lh4.ggpht.com/-s44hs-8_b7g/VEDPjCcnTDI/AAAAAAAAHc4/S0Arv9kjreI/image_thumb3.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Using this &lt;a href="http://tools.pingdom.com/fpt/#!/bWyPXf/https://haveibeenpwned.com/"&gt;deep link&lt;/a&gt;, you can go back and inspect that result yourself but let me break it down briefly here for you.&lt;/p&gt; &lt;p&gt;Firstly, 90/100 is a pretty good rating (allegedly faster than 80% of websites already), but let’s see where it’s slowing down. In particular, let’s look at the Page Speed Performance report:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-doU_beF1cMk/VEDPj28AdiI/AAAAAAAAHdA/-vg6h4G7YrQ/s1600-h/image17.png"&gt;&lt;img width="778" height="312" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="A rating of 0 on &amp;quot;Parallelize downloads across hostnames&amp;quot;" src="http://lh3.ggpht.com/-hppfTBCyDI0/VEDPkowgjHI/AAAAAAAAHdI/1FpekLgBwl4/image_thumb5.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;There are a bunch of other 100/100 results there but clearly the problem is the lack of parallelising downloads across hostnames. The real problem is those 33 image requests and they all go to az594751.vo.msecnd.net which is my CDN endpoint on Azure. Pingdom is recommending distributing them across multiple hostnames to increase the browser’s ability to request them in parallel (the browser will only make so many asynchronous requests to the same host).&lt;/p&gt; &lt;p&gt;If we look at the waterfall chart of just the image requests, you get a pretty good idea of what’s going on. It doesn’t matter that this is zoomed right out, I’ve added markers at the end of the first request and the end of the last request to give a sense of duration. What’s interesting is that the first 14 requests all complete at about the same time then after that, everything starts lagging:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh3.ggpht.com/-Nwog-cl89_M/VEDPmpeU4nI/AAAAAAAAHdQ/jgq7SqrvaIE/s1600-h/Untitled-12.png"&gt;&lt;img width="400" height="655" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="All requests for SVGs in a waterfall chart" src="http://lh4.ggpht.com/-49mbB8_s7Nk/VEDPr7boi_I/AAAAAAAAHdY/4ftsm5WMYSc/Untitled-1_thumb.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So let’s do this: rather than 33 images on the page, let’s cap it at 10 like so:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh3.ggpht.com/-4QANzlv-8fo/VEDPtFfmj1I/AAAAAAAAHdg/vP46-mFORlI/s1600-h/image8.png"&gt;&lt;img width="820" height="591" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="HIBP now limited to 10 SVG images" src="http://lh3.ggpht.com/-R21KWvCF8H8/VEDPuApOr1I/AAAAAAAAHdo/i2UJpSOgGFo/image_thumb2.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Frankly, that’s all you need, it doesn’t serve much value having every logo there and I’ve added a “view all” link so people can drill down if they really want to see everything. Let’s try Pingdom again:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-uuNUJcJNkzo/VEDPu530zyI/AAAAAAAAHdw/HEvj8_1hO4Y/s1600-h/image14.png"&gt;&lt;img width="628" height="227" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Revised Pingdom score at 96/100" src="http://lh4.ggpht.com/-bEcVnu_EC4U/VEDPwnW9W-I/AAAAAAAAHd4/uFi-gUxjvxM/image_thumb4.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here’s another &lt;a href="http://tools.pingdom.com/fpt/#!/cvKS8O/https://haveibeenpwned.com/"&gt;deep link to the result&lt;/a&gt; and clearly there are improvements on multiple fronts. The biggie is the requests – they’ve just been halved. The page size has also come way down – that’s a 29% decrease in the bytes that need to be downloaded. It’s also a significant decrease in the bytes I pay for; a bunch of stuff comes from public CDNs already which I &lt;em&gt;don’t&lt;/em&gt; pay for and by slashing the downloads from my own personal CDN, I save dollars.&lt;/p&gt; &lt;p&gt;The perf grade has obviously improved as a result of the requests and bytes going down and so too has the load time, down from 1.51 seconds before (but take this with a grain of salt as it fluctuates wildly at the best of times). Let’s check that page speed performance now:&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-8oXwe0LZ7gA/VEDP0gSiLTI/AAAAAAAAHeA/jUTv1N_-2yc/s1600-h/image20.png"&gt;&lt;img width="765" height="274" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="No more 0 scores on the page speed" src="http://lh3.ggpht.com/-HdSTmQh4MlU/VEDP1RwhSaI/AAAAAAAAHeI/QkxeyfNvBlE/image_thumb6.png?imgmax=800" border="0"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Parallelised downloads have now gone completely which is great (actually, it’s not “gone”, it’s just down the bottom with a 100/100 score). Oddly, the results below 100/100 have all dropped from what they were on the earlier test without having made any changes that would affect them so I can only assume they’re weighted. None of them are &lt;em&gt;bad &lt;/em&gt;though and resolving them is no simple task (that’s a story for another time).&lt;/p&gt; &lt;p&gt;So this is all good and very theoretical. What I mean by that is tools like Pingdom do a great job of breaking down the page performance in an analytical fashion and describing how it &lt;em&gt;should&lt;/em&gt; perform for end users, but it’s not entirely representative of what users experience as they get spread out all over the world with varying connections and browsers and unpredictable dependencies. This is where &lt;a href="https://newrelic.com/"&gt;NewRelic&lt;/a&gt; comes in.&lt;/p&gt; &lt;p&gt;Here’s a six hour window of performance yesterday:&lt;/p&gt; &lt;p&gt;&lt;img width="880" height="340" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="NewRelic showing a 3.25s browser load time" src="http://lh5.ggpht.com/-qvpqr9KGMbc/VEDP2LokuII/AAAAAAAAHeQ/rBMyHHCgaYc/image3.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;What’s really neat is the way NewRelic breaks the data down into the various components that all contribute to the overall load time of the page. Now remember – this is what the user is experiencing in their browser (NewRelic adds some client script to track this) and it’s the culmination of thousands of requests from all over the world. It’s higher than the Pingdom result as this includes both DOM and page rendering, not just how long it took everything to download. The bottom line here was that yesterday, it took 3.25 seconds for the page to fully load.&lt;/p&gt; &lt;p&gt;Here’s what’s happened since the update today:&lt;/p&gt; &lt;p&gt;&lt;img width="880" height="342" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="NewRelic showing a 2.85s browser load time" src="http://lh5.ggpht.com/-piSMLNzkqCo/VEDP22WZndI/AAAAAAAAHeY/GdpLQvYxlq8/image6.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;It’s actually taken a bit longer on the server today (although 14ms is no more than just an arbitrary fluctuation) yet I’ve shaved 400ms of the load time of the page. That’s a win! Whilst I can’t break out individual figures for the elements above, it looks like a lot of improvement in page rendering, in fact more so than in the network which surprises me a bit. But then again, that may just be the oddities of performance that I mentioned earlier; perhaps it genuinely consumed more time to render those extra 23 SVGs then it did to download them. Either way, it’s a marked improvement.&lt;/p&gt; &lt;p&gt;Of course this is a predictable result – reducing all those requests was always going to improve the state of affairs. The important point I want to make here though is that you need to be able to base decisions made around performance and scale on tangible observations. So frequently I see people observe a behaviour (it’s too slow) draw a conclusion (we need more power) and then end up disappointed (crap, it’s still too slow). This is no way to approach the technology, not when we have tools like the ones above and many other excellent examples at our disposal.&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/T0kD7p1_WLs" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/8105427837160939037" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/8105427837160939037" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/T0kD7p1_WLs/measure-optimise-then-measure-again.html" title="Measure, optimise then measure again: further refining “Have I been pwned?”" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <media:thumbnail
        xmlns:media="http://search.yahoo.com/mrss/" url="http://lh3.ggpht.com/-X0GlLVKy1R8/VEDPh6_fo2I/AAAAAAAAHck/oOVYfytmEPo/s72-c/image_thumb.png?imgmax=800" height="72" width="72" />
    <feedburner:origLink>http://www.troyhunt.com/2014/10/measure-optimise-then-measure-again.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-3111154891518010371</id>
    <published>2014-10-15T21:55:00.001+11:00</published>
    <updated>2014-10-22T00:25:00.641+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="SSL" />
    <title type="text">Everything you need to know about the POODLE SSL bug</title>
    <content type="html">
      &lt;p&gt;We don’t seem to go far these days without the next “catastrophic” bug hitting the internets. Remember how a few weeks ago &lt;a href="http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html"&gt;Shellshock&lt;/a&gt; was going to end the internet as we know it? If you believed all the headlines, that sucker was going to own us through our light globes (I suspect some poetic license was taken on my IoT comments) and the web would never be the same. Scroll forward and it’s already “Shell-what?”&lt;/p&gt; &lt;p&gt;Earlier this year it was &lt;a href="http://www.troyhunt.com/2014/04/everything-you-need-to-know-about.html"&gt;Heartbleed&lt;/a&gt; and it too was destined to bring the internet to its knees. Except it didn’t. Whilst I’ve no doubt a number of sites got well and truly screwed over by it (Shellshock too, for that matter), it was over-inflated yet in some ways the hysteria served a positive purpose in that it got massive airtime and inevitably more attention than it would have had we all responded a little more rationally.&lt;/p&gt; &lt;p&gt;Which brings us to POODLE. Whilst I doubt we’ll see the same mass hysteria as we did last month, it is (and will continue) hitting the news and like the other two biggies this year, it’s serious enough to warrant attention and obscure enough to result in wild speculation and a general misunderstanding of the underlying risk. Let me share what I know based on the questions I’m hearing.&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt; &lt;h4&gt;Enough with the crazy bug names, why Poodle?!&lt;/h4&gt; &lt;p&gt;No, not Poodle, POODLE – the Padding Oracle On Downgraded Legacy Encryption. In the modern era of fancy bug names, the guys who names this must have been ecstatic when they realised that the acronym actually made a whole heap of sense! But really, that’s exactly what it is – a protocol downgrade support that then exploits a legacy encryption implementation. Nice one guys!&lt;/p&gt; &lt;h4&gt;Who found this one?&lt;/h4&gt; &lt;p&gt;A few blokes from Google this time, Bodo Möller, Thai Duong and Krzysztof Kotowicz. You may remember Thai from such bugs as &lt;a href="http://www.troyhunt.com/2010/09/fear-uncertainty-and-and-padding-oracle.html"&gt;the ASP.NET Padding Oracle from 2010&lt;/a&gt;. Smart guy.&lt;/p&gt; &lt;p&gt;Anyway, the three of them wrote a paper last month titled &lt;a href="https://www.openssl.org/~bodo/ssl-poodle.pdf"&gt;This POODLE Bites: Exploiting The SSL 3.0 Fallback&lt;/a&gt; which talked about the risk I’ll describe in this post. It’s making news today as the paper has been released, the proverbial penny dropped about the impact on our “secure” comms and now everyone from journos to sys admins are scrambling to get on top of it.&lt;/p&gt; &lt;h4&gt;So what are we downgrading from and to?&lt;/h4&gt; &lt;p&gt;It all comes down to SSL, its successor known as TLS and the versions spread across them. It goes like this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;SSL 1.0:&lt;/strong&gt; Dates back to the early 90s and was never publicly released &lt;/li&gt; &lt;li&gt;&lt;strong&gt;SSL 2.0:&lt;/strong&gt; From 1995 and met a need in a rapidly emerging web world, but was rather buggy&lt;/li&gt; &lt;li&gt;&lt;strong&gt;SSL 3.0:&lt;/strong&gt; Launched in ‘96 and solved a bunch of issues from 2.0 via a complete redesign&lt;/li&gt; &lt;li&gt;&lt;strong&gt;TLS 1.0:&lt;/strong&gt; Came into being in ‘99 and was an evolutionary improvement on SSL, albeit one without interoperability&lt;/li&gt; &lt;li&gt;&lt;strong&gt;TLS 1.1:&lt;/strong&gt; RFC from 2006 and contains various defences against attacks on earlier versions&lt;/li&gt; &lt;li&gt;&lt;strong&gt;TLS 1.2:&lt;/strong&gt; This time from ‘08 with a bunch of features to strengthen the cryptographic implementation&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;There’s a TLS 1.3 in draft spec so we’ll skip that for now, the important thing is to illustrate a continuous evolution of the construct that secures traffic in transit. Each subsequent version improves on its forefathers, often addressing bugs of varying severity that potentially undermined the very purpose of transport layer security.&lt;/p&gt; &lt;h4&gt;What’s the deal with “downgrading”?&lt;/h4&gt; &lt;p&gt;The problem is that the internet has a whole heap of moving parts which evolve independently of each other. Think about the current state – we’ve still got a heap of Windows XP boxes from 2001 which somehow still need play nice with the modern web. You fire up, say, Internet Explorer 6 on one of those and smart websites will downgrade the experience. You won’t get SVGs, you’ll get GIFs. You won’t get rounded corners on HTML elements, you’ll get square ones.&lt;/p&gt; &lt;p&gt;And so it is with SSL; when two parties (say a browser and a server) are at different stages of evolution and offer support for different versions, they could either throw their hands up and say “We just can’t get along” or they can compromise and fall back to a common version they can both support. The latter is the more usable so that’s what often happens. (Incidentally, this happens implicitly and without user interaction. It’s a “feature”.)&lt;/p&gt; &lt;p&gt;The problem with POODLE comes when the connection is downgraded to use SSL 3.0 when higher level TLS comms fail. If an attacker in the middle of a connection can cause this failure then they may be able to force the browser to do exactly what it’s designed to do – fall back to SSL 3.0 and try again. The real problem here is that it’s not a proper protocol version negotiation where one party says “What ya got” and the other says “I got version X” and they both agree on the protocol, rather it’s one party going “This didn’t work, let me try something weaker”. &lt;em&gt;Why &lt;/em&gt;this didn’t work doesn’t feature in the discussion, it just causes an automatic downgrade of the protocol.&lt;/p&gt; &lt;h4&gt;Ok, so what’s wrong with just talking via SSL 3.0?&lt;/h4&gt; &lt;p&gt;Good question! I mean SSL 3.0 did us well for many years without the internet self-imploding, right? Well yes, but there were numerous risks of varying severity found and it’s a rather serious one that caused all the recent fuss. There’s &lt;a href="https://www.imperialviolet.org/2014/10/14/poodle.html"&gt;a very good blog post on this from Adam Langley&lt;/a&gt; who works on Chrome and it ultimately boils down to another padding oracle attack (that’d be the “POO”).&lt;/p&gt; &lt;p&gt;If you recall from &lt;a href="http://www.troyhunt.com/2010/09/fear-uncertainty-and-and-padding-oracle.html"&gt;the aforementioned ASP.NET padding oracle blog post&lt;/a&gt;, it all has to with how encrypted strings are padded out to be a consistent byte length. In the case of POODLE, the attacker needs the victim’s browser to make hundreds of requests in order to actually exploit the risk. From &lt;a href="https://www.openssl.org/~bodo/ssl-poodle.pdf"&gt;the original security advisory by the Google guys&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Encryption in SSL 3.0 uses either the RC4 stream cipher, or a block cipher in CBC mode. RC4 is well known to have biases [RC4&amp;shy;biases], meaning that if the same secret (such as a password or HTTP cookie) is sent over many connections and thus encrypted with many RC4 streams, more and more information about it will leak.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Right, so how are we going to get the browser to make all those requests? Well you still need to be able to mount a man in the middle attack (which of course is exactly what SSL is there to protect encrypted traffic against) after which you’re then going to want the victim to load the target site over HTTP which if you control the connection, isn’t hard. Then, well, they describe it best in that advisory:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;To launch the POODLE attack, run a JavaScript agent on evil.com (or on &lt;a href="http://example.com)"&gt;http://example.com)&lt;/a&gt; to get the victim’s browser to send cookie &amp;shy;bearing HTTPS requests to &lt;a href="https://example.com"&gt;https://example.com&lt;/a&gt;, and intercept and modify the SSL records sent by the browser in such a way that there’s a non&amp;shy; negligible chance that example.com will accept the modified record. If the modified record is accepted, the attacker can decrypt one byte of the cookies.&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;There’s not a detailed POC in the advisory (do share if one turns up later), but it’s clearly not a trivial attack, at least not compared to the “Here, just make an HTTP request to a server” attack vector that Shellshock presented. It also only appears to get cookies and auth headers at this time. “Only” probably undersells the risk though because these are &lt;em&gt;very&lt;/em&gt; important pieces of data that could then easily lead to session hijacking if disclosed, but it’s not the entire request and response at risk here. Mind you, if you own the session then you’d be able to get a lot of the data in that anyway!&lt;/p&gt; &lt;h4&gt;Why bother with supporting SSL 3.0 at all?&lt;/h4&gt; &lt;p&gt;Good question, easy answer – Internet Explorer 6. Yes, the browser that everyone loves to hate (except when it first launched and was actually quite good) does not offer support beyond SSL 3.0 so no TLS. What you have to remember is that this browser was &lt;em&gt;absolutely dominant&lt;/em&gt;. In fact depending on where you are in the world, &lt;a href="http://www.troyhunt.com/2010/08/aye-pirates-be-reason-ie6-just-wont-die.html"&gt;only 4 years ago it had up to 60% of the browser market share&lt;/a&gt;. We shouldn’t only blame IE 6, but it hung around for an awful long time after all the other browsers had moved past SSL 3.0. (In fairness, IE 7 and later also moved past it but IE 6 had a very, very long tail.)&lt;/p&gt; &lt;p&gt;IE 6 has now tapered off to near obscurity, but that doesn’t change the fact that there are a whole heap of websites stood up during its heyday (and before) which still offer support for SSL 3.0. You could pretty much kill it in most places today, but you’ve also got to remember that there are a heap of other clients out there talking over HTTPS which &lt;em&gt;may&lt;/em&gt; depend on falling back to SSL 3.0. I’m not sure, for example, if some early generation smart TVs will simply stop working if TLS is required by the server. It’s the uncertainty that keeps these early generation technologies alive.&lt;/p&gt; &lt;h4&gt;What about on the browser end, can you just disable it there?&lt;/h4&gt; &lt;p&gt;Yep, you sure can, for example you can define a minimum TLS version in Firefox:&lt;/p&gt; &lt;p&gt;&lt;img width="717" height="262" title="" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" alt="Disabling SSL in Firefox" src="http://lh6.ggpht.com/-JH6jBiznuVg/VD5Sl_VkBwI/AAAAAAAAHcQ/IfvD4B44FE4/image5.png?imgmax=800" border="0"&gt;&lt;/p&gt; &lt;p&gt;It defaults to 0 which effectively means no minimum and SSL 3.0 will still play nice. Setting it to 1 will resolve the fall back risk as SSL simply won’t work anymore.&lt;/p&gt; &lt;p&gt;As for Chrome, &lt;a href="https://chromium.googlesource.com/chromium/src/+/32352ad08ee673a4d43e8593ce988b224f6482d3"&gt;there’s a patch pending&lt;/a&gt; that sets the minimum fall back version to TLS 1.0 but apparently it’ll be a few weeks until we see that released into Chrome’s stable channel as it has obvious potential risks relating to compatibility. There’s &lt;a href="http://askubuntu.com/questions/537196/how-do-i-patch-workaround-sslv3-poodle-vulnerability-cve-2014-3566"&gt;guidance on the Ask Ubuntu forum about disabling support for SSL 3.0 for Chrome on Linux&lt;/a&gt;, I’ve not looked into a way to disable it on Windows so please leave a comment if you have a process for that.&lt;/p&gt; &lt;p&gt;For Internet Explorer and the rest of the Microsoft stack that talks over HTTP, today they released &lt;a href="https://technet.microsoft.com/en-us/library/security/3009008.aspx"&gt;Security Advisory 3009008&lt;/a&gt; which details how to disable it via group policy.&lt;/p&gt; &lt;h4&gt;But that’ll just break sites that &lt;em&gt;need&lt;/em&gt; SSL 3.0 won’t it?&lt;/h4&gt; &lt;p&gt;Ah, good point, yes! This is where &lt;a href="https://tools.ietf.org/html/draft-ietf-tls-downgrade-scsv-00"&gt;TLS_FALLBACK_SCSV&lt;/a&gt; is getting a lot of press today, not least of all &lt;a href="http://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html"&gt;from Google themselves&lt;/a&gt;. The problem with many fall back implementations is that they essentially say “oh crap, that didn’t work, let’s pick an earlier TLS / SSL implementation and give that a go”. This isn’t particularly intelligent as the problem may never have been lack of support for, say, TLS 1.1 rather it was just a dodgy connection.&lt;/p&gt; &lt;p&gt;TLS_FALLBACK_SCSV takes a much more intelligent view of gracefully degrading the supported transport layer security implementation. You never &lt;em&gt;want&lt;/em&gt; a protocol downgrade as it poses obvious risks so what TLS_FALL… etc does is this (from &lt;a href="https://tools.ietf.org/html/draft-ietf-tls-downgrade-scsv-00"&gt;the RFC&lt;/a&gt;):&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The TLS_FALLBACK_SCSV cipher suite value is meant for use by clients that repeat a connection attempt with a downgraded protocol in order to avoid interoperability problems with legacy servers.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;That’s your fall back scenario, now the client can specify its preference on how it would like to communicate:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;If a client sends a ClientHello.client_version containing a lower value than the latest (highest-valued) version supported by the client, it SHOULD include the TLS_FALLBACK_SCSV cipher suite value in ClientHello.cipher_suites.&amp;nbsp; (Since the cipher suite list in the ClientHello is ordered by preference, with the client's favorite choice first, signaling cipher suite values will generally appear after all cipher suites that the client actually intends to negotiate.)&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, fall back but &lt;em&gt;tell the server what protocol the client would prefer&lt;/em&gt;. This resolves attacks that attempt to downgrade the connection in that even if the communication via higher level protocols is disrupted, the client can still tell the server how &lt;em&gt;it would like to communicate&lt;/em&gt; even though it may be telling it that over a weaker protocol.&lt;/p&gt; &lt;p&gt;Of course this won’t solve the risk of talking over SSL 3.0 when there’s simply no newer alternative, but it solves the “we still have SSL 3.0 around because legacy” scenario. The greatest limitation now, however, seems to be that it’s only supported in Chrome and on Google’s services. I’d love someone to prove me wrong, but from what I can ascertain, support is very, very limited right now.&lt;/p&gt; &lt;h4&gt;What about disabling it on the server?&lt;/h4&gt; &lt;p&gt;Here’s the thing – you can only talk over SSL 3.0 if both the client and the server support it. This means two things:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;As a consumer, you can entirely circumvent the risk by using a browser with SSL 3.0 disabled. If the server requires 3.0, things will break.&lt;/li&gt; &lt;li&gt;As a website owner, you can entirely circumvent the risk by disabling SSL 3.0 on the site. If the client requires 3.0, things will break.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Only one side needs to take action for the risk to be addressed, but it also means that either side can break their things if the other party simply hasn’t gotten with the times.&lt;/p&gt; &lt;p&gt;The next question, of course, is &lt;em&gt;how&lt;/em&gt; you disable it on the server side. Unsurprisingly, the guidance differs based on your server of choice. Fellow MVP André Klingsheim has a good post on &lt;a href="http://www.dotnetnoob.com/2013/10/hardening-windows-server-20082012-and.html"&gt;Hardening Windows Server 2008/2012 and Azure SSL/TLS configuration&lt;/a&gt;. If you live in an Apache world then check out &lt;a href="https://scottlinux.com/2013/06/18/disable-sslv2-and-sslv3-in-apache/"&gt;Disable SSLv2 and SSLv3 in Apache&lt;/a&gt;. Other servers are a Google search away, it’s usually a trivial configuration change. Do be conscious though – this &lt;em&gt;could&lt;/em&gt; break things. It’ll likely be a rare occurrence, but it could be important enough to care about.&lt;/p&gt; &lt;p&gt;But just in case you want a good precedent to refer to, &lt;a href="https://blog.cloudflare.com/sslv3-support-disabled-by-default-due-to-vulnerability/"&gt;CloudFlare have disabled SSL 3.0 support altogether&lt;/a&gt;. Won’t somebody please think of the older browsers!! Well yes, but they also stated that this would adversely impact a mere 0.09% of their traffic.&lt;/p&gt; &lt;h4&gt;How can I test if a site still supports SSL 3.0?&lt;/h4&gt; &lt;p&gt;Couple of options here with the first being &lt;a href="http://www.poodlescan.com/"&gt;poodlescan.com&lt;/a&gt;. Yes, this is a thing already.&lt;/p&gt; &lt;p&gt;The other more tried and tested option is &lt;a href="https://www.ssllabs.com/ssltest/"&gt;Qualys’ SSL Labs test&lt;/a&gt;. This is a long time favourite that tests a bunch of different SSL implementation details and includes the supported protocols in the report.&lt;/p&gt; &lt;p&gt;Both of these tests will show &lt;em&gt;very&lt;/em&gt; broad-reaching support for SSL 3.0. In that regard, the scope of this risk if very large.&lt;/p&gt; &lt;h4&gt;Is this as bad as Heartbleed and Shellshock?&lt;/h4&gt; &lt;p&gt;No, not by a long shot. To begin with, they were (are) both remotely exploitable. You can be sitting on the beach pwning machines on the other side of the world. POODLE needs the attacker to get in the middle of the traffic so there’s your classic “attacker in the coffee shop” or the good old &lt;a href="http://www.troyhunt.com/2013/04/the-beginners-guide-to-breaking-website.html"&gt;Wifi Pineapple&lt;/a&gt; (or equivalent).&lt;/p&gt; &lt;p&gt;In all likelihood, the greatest risk will come from those who control internet infrastructure. For example, &lt;a href="https://www.eff.org/deeplinks/2011/09/post-mortem-iranian-diginotar-attack"&gt;the Iranian government played a pretty pivotal role in using DigiNotar certificates to intercept their citizen’s traffic&lt;/a&gt;. Attacks against the transport layer make a lot more sense when you control all the ingress and egress traffic for an audience as broad as an entire nation.&lt;/p&gt; &lt;p&gt;That’s not to downplay the risk – SSL / TLS / HTTPS has a critical role to play and indeed that’s why we (hopefully) invest so much effort into getting it right in our web assets. What’s different about POODLE though is the ease of the attack, the sophistication required to mount it, the scope with which it can be applied and the impact when it’s successful. None of those attributes holds a candle to Heartbleed and Shellshock.&lt;/p&gt; &lt;h4&gt;Any other insights?&lt;/h4&gt; &lt;p&gt;Finally, a point on the importance of keeping software current: The number of times I’ve seen people say “Oh version X works just fine for me, I don’t need to upgrade”. It’s events like this which serve as a reminder that what is “fine” today can be suddenly broken beyond repair tomorrow. If you’re running IE 6 today (yes, there are still some) and you don’t have a choice in upgrading because “reasons”, you’re stuffed. Next time it might be a vulnerability with Windows XP and it’ll be “no support for you”. We may not be able to see individual events like this coming, but the pattern of vulnerabilities appearing which can be addressed in newer versions of the software but leave the aging ones at risk is now very well established.&lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;Edit, 21 Oct 2014:&lt;/strong&gt; I've just published a post on &lt;a href="http://www.troyhunt.com/2014/10/disabling-ssl-3-in-azure-websites-and.html"&gt;Disabling SSL 3 in Azure websites (and why it doesn’t look like you have)&lt;/a&gt;, check it out if you're working in an Azure website world.&lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/M8SuYd-01hQ" height="1" width="1"/&gt;
    </content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/3111154891518010371" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/3111154891518010371" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/M8SuYd-01hQ/everything-you-need-to-know-about.html" title="Everything you need to know about the POODLE SSL bug" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <media:thumbnail
        xmlns:media="http://search.yahoo.com/mrss/" url="http://lh6.ggpht.com/-JH6jBiznuVg/VD5Sl_VkBwI/AAAAAAAAHcQ/IfvD4B44FE4/s72-c/image5.png?imgmax=800" height="72" width="72" />
    <feedburner:origLink>http://www.troyhunt.com/2014/10/everything-you-need-to-know-about.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-948710797937303301</id>
    <published>2014-10-15T08:09:00.001+11:00</published>
    <updated>2014-10-15T08:09:21.698+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Speaking" />
    <title type="text">Gone Mobile Podcast: Securing Mobile Apps</title>
    <content type="html">&lt;p&gt;I’ve learned some rather intriguing things about what our mobile apps are doing while we’re not looking in the six days since I launched &lt;a href="http://www.troyhunt.com/2014/10/find-crazy-stuff-in-mobile-app.html"&gt;the challenge to find crazy stuff in mobile app communications&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, there’s the social app that allows you to &lt;a href="http://www.troyhunt.com/2014/10/find-crazy-stuff-in-mobile-app.html#comment-1627770487"&gt;accept friend requests on behalf of someone else&lt;/a&gt; if you call the API in the right way. Sequential user IDs and no rate limiting help that one along nicely.&lt;/p&gt; &lt;p&gt;Then there’s the word game that &lt;a href="http://www.troyhunt.com/2014/10/find-crazy-stuff-in-mobile-app.html#comment-1626576205"&gt;sends you all the possible solutions via the API&lt;/a&gt; whilst you’re playing. That’s rather handy and it only take a little bit of device proxying and wammo! There’s all your answers.&lt;/p&gt; &lt;p&gt;Or how about &lt;a href="http://www.troyhunt.com/2014/10/find-crazy-stuff-in-mobile-app.html#comment-1627299950"&gt;this detailed overview&lt;/a&gt; of how an API passes credentials around in the URL after storing them in clear text and making a vain attempt to thwart SQL injection. Yep.&lt;/p&gt; &lt;p&gt;I recently caught up with &lt;a href="https://twitter.com/gshackles"&gt;Greg Shackles&lt;/a&gt; of the Gone Mobile Podcast and we spoke about a heap of these security anti-patterns in mobile APIs. This is off the back of my latest Pluralsight course, &lt;a href="http://pluralsight.com/courses/table-of-contents/hack-your-api-first"&gt;Hack Your API First&lt;/a&gt; so if you want to know what that’s all about, the podcast will give you a really good sense of why it’s important. You can find it podcast on &lt;a href="http://gonemobile.io/blog/e0018-Securing-Mobile-Apps-with-Troy-Hunt/"&gt;Gone Mobile’s site&lt;/a&gt; or listen to it directly here:&lt;/p&gt; &lt;p&gt;&lt;audio controls&gt;&lt;source preload="none" type="audio/mpeg" src="http://traffic.libsyn.com/gonemobile/Gone.Mobile.E0018.Securing.Mobile.Apps.with.Troy.Hunt.mp3" /&gt;&lt;/audio&gt;&lt;/p&gt; &lt;p&gt;Oh – and if you want to take the course &lt;em&gt;for free&lt;/em&gt;, head on over to &lt;a href="http://www.troyhunt.com/2014/10/find-crazy-stuff-in-mobile-app.html"&gt;that little challenge I mentioned earlier&lt;/a&gt;, leave a comment on the crazy stuff you’ve found and I’ll send you over a free pass.&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/G52QZv4nJ2E" height="1" width="1"/&gt;</content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/948710797937303301" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/948710797937303301" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/G52QZv4nJ2E/gone-mobile-podcast-securing-mobile-apps.html" title="Gone Mobile Podcast: Securing Mobile Apps" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <feedburner:origLink>http://www.troyhunt.com/2014/10/gone-mobile-podcast-securing-mobile-apps.html</feedburner:origLink>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-3977663544337573923.post-4264883902172079952</id>
    <published>2014-10-14T08:34:00.001+11:00</published>
    <updated>2014-10-15T09:05:55.598+11:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term=".NET" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <title type="text">Raygun.io and ignoring specific Web API exception types</title>
    <content type="html">
      &lt;p&gt;In the spirit of “here’s something I couldn’t find an easy answer for so I’m writing it myself”, let me very briefly run you through how to have Raygun.io ignore specific exception types raised by Web API.&lt;/p&gt; &lt;p&gt;Firstly, &lt;a href="https://raygun.io/blog/2014/08/webapi-exception-tracking/"&gt;Web API support came a couple of months ago&lt;/a&gt; which is rather important given how much stuff is transitioning to APIs these days. I use Web API fairly extensively in &lt;a href="https://haveibeenpwned.com/"&gt;Have I been pwned?&lt;/a&gt; (HIBP), partly to enable nice light async requests once pages have already loaded and partly as &lt;a href="https://haveibeenpwned.com/API/v2"&gt;a dedicated API that others can consume at will&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Setting up Raygun.io was dead simple and it looks like this in the WebApiConfig class which is invoked on Application_Start:&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: blue"&gt;public static void &lt;/span&gt;&lt;span style="background: white; color: black"&gt;Register(&lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;HttpConfiguration &lt;/span&gt;&lt;span style="background: white; color: black"&gt;config)
      {
      &lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;RaygunWebApiClient&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.Attach(config);
      }&lt;/span&gt;&lt;/pre&gt;
      &lt;p&gt;Job done, except there’s a problem: The theory is that APIs should be all nice and HTTP semantic which means, for example, that if you were to request a resource via the API and that resource didn’t exist, the API should return a 404. Now I’ve got Raygun.io logging 404s by default because I want to know if I’ve broken a link or someone has linked to a non-existent resource or (and this happens a lot) someone is running a security scanning tool over the site and looking for things that don’t exist. However, I don’t want to log 404s that I’m intentionally throwing during the organic execution of the app.&lt;/p&gt;&lt;a name='more'&gt;&lt;/a&gt;
      &lt;p&gt;The fix is easy enough but the solution is a little verbose code wise. Let’s extend the previous line of code like so:&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: blue"&gt;private static &lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;RaygunWebApiClient &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_client;
      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;public static void &lt;/span&gt;&lt;span style="background: white; color: black"&gt;Register(&lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;HttpConfiguration &lt;/span&gt;&lt;span style="background: white; color: black"&gt;config)
      {
      &lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;RaygunWebApiClient&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.Attach(config, () =&amp;gt;
      {
      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(_client == &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;null&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)
      {
      _client = &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;new &lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;RaygunWebApiClient&lt;/span&gt;&lt;span style="background: white; color: black"&gt;();
      _client.SendingMessage += client_SendingMessage;
      }

      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_client;
      });
      }

      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;private static void &lt;/span&gt;&lt;span style="background: white; color: black"&gt;client_SendingMessage(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;object &lt;/span&gt;&lt;span style="background: white; color: black"&gt;sender, &lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;RaygunSendingMessageEventArgs &lt;/span&gt;&lt;span style="background: white; color: black"&gt;e)
      {
      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(e.Message.Details.Request == &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;null &lt;/span&gt;&lt;span style="background: white; color: black"&gt;|| e.Message.Details.Request.Url == &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;null &lt;/span&gt;&lt;span style="background: white; color: black"&gt;|| e.Message.Details.Response == &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;null&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)
      {
      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
      }

      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;var &lt;/span&gt;&lt;span style="background: white; color: black"&gt;url = e.Message.Details.Request.Url;
      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;var &lt;/span&gt;&lt;span style="background: white; color: black"&gt;code = e.Message.Details.Response.StatusCode;

      &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(url.StartsWith(&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"/api/v2/breachedaccount/"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;, &lt;/span&gt;&lt;span style="background: white; color: #2b91af"&gt;StringComparison&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.InvariantCultureIgnoreCase) &amp;amp;&amp;amp; code == 404)
      {
      e.Cancel = &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;true&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
      }
      }&lt;/span&gt;&lt;/pre&gt;
      &lt;p&gt;Ok, there’s a bit going on here but it’s (mostly) pretty intuitive:&lt;/p&gt;
      &lt;ol&gt;
      &lt;li&gt;Call the overloaded Attach method on the RaygunWebApiClient class which takes a Func&amp;lt;RaygunWebApiClient&amp;gt; delegate&lt;/li&gt;
      &lt;li&gt;If the RaygunWebApiClient hasn’t already been initialised, set that guy up and attach a SendingMessage event that calls client_SendingMessage (this is where the real work happens as this event is fired every time an exception is raised via Web API)&lt;/li&gt;
      &lt;li&gt;Within client_SendingMessage, we’ll first make sure that the request, the URL on it and the response all have values (apparently there are circumstances where they may not)&lt;/li&gt;
      &lt;li&gt;If the URL matches the one I want my custom logic on and the HTTP response code is a 404, cancel the event&lt;/li&gt;&lt;/ol&gt;
      &lt;p&gt;Admittedly my final code is somewhat more verbose than that as I have multiple paths and status code combinations that might lead to the event being cancelled. It’d be neat to be able to do this via configuration rather than code, but certainly this is functional and achieves the behaviour I was after.&lt;/p&gt;  &lt;img src="http://feeds.feedburner.com/~r/TroyHunt/~4/_4cK-3WCkuc" height="1" width="1"/&gt;
    </content>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/4264883902172079952" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3977663544337573923/posts/default/4264883902172079952" />
    <link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/TroyHunt/~3/_4cK-3WCkuc/raygunio-and-ignoring-specific-web-api.html" title="Raygun.io and ignoring specific Web API exception types" />
    <author>
      <name>Troy Hunt</name>
      <uri>https://plus.google.com/111846329802076778489</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh3.googleusercontent.com/-r4_CjHr7f7Q/AAAAAAAAAAI/AAAAAAAAHGM/ATfTwh1qXkc/s512-c/photo.jpg" />
    </author>
    <feedburner:origLink>http://www.troyhunt.com/2014/10/raygunio-and-ignoring-specific-web-api.html</feedburner:origLink>
  </entry>
</feed>
